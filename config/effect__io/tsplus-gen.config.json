{
  "project": {
    "packageName": "@effect/io",
    "tsconfig": "tsconfig.build.json",
    "rootDir": "src",
    "exclude": ["**/internal/**"],
    "moduleConfig": {
      "@effect/io": {
        "staticPrefixes": ["from", "unsafeFrom", "make", "unsafeMake"],
        "fluentNamespaces": ["effect/io", "Iterable"]
      },
      "@effect/io/Cached": {
        "staticPrefixes": ["from", "unsafeFrom", "make", "unsafeMake"],
        "fluentNamespaces": ["effect/io/Cached"]
      },
      "@effect/io/FiberRef": {
        "staticPrefixes": ["from", "unsafeFrom", "make", "unsafeMake"],
        "fluentNamespaces": ["effect/io/FiberRef"]
      },
      "@effect/io/Layer": {
        "staticPrefixes": ["from", "unsafeFrom", "make", "unsafeMake"],
        "fluentNamespaces": ["effect/io/Layer"]
      },
      "@effect/io/Logger": {
        "staticPrefixes": ["from", "unsafeFrom", "make", "unsafeMake"],
        "fluentNamespaces": ["effect/io/Logger"]
      },
      "@effect/io/Metric": {
        "staticPrefixes": ["from", "unsafeFrom", "make", "unsafeMake"],
        "fluentNamespaces": ["effect/io/Metric"]
      }
    }
  },
  "namespaces": [
    {
      "name": "effect/io",
      "type": {
        "include": true,
        "includeCompanion": true,
        "companionSuffix": ".Ops"
      },
      "static": {
        "include": true,
        "staticSuffix": ".Ops"
      },
      "fluent": {
        "include": true,
        "includeStatic": true,
        "staticSuffix": ".Aspects"
      },
      "pipeable": {
        "include": true,
        "includeStatic": true,
        "staticSuffix": ".Aspects"
      },
      "getter": {
        "include": true,
        "includeStatic": true,
        "staticSuffix": ".Aspects"
      }
    },
    {
      "name": "Iterable",
      "static": {
        "include": false
      },
      "getter": {
        "include": true,
        "includeStatic": true,
        "staticSuffix": ".Ops",
        "staticUsesOutputType": true
      },
      "pipeable": {
        "include": true,
        "includeStatic": true,
        "staticSuffix": ".Ops",
        "staticUsesOutputType": true
      },
      "fluent": {
        "include": true,
        "includeStatic": true,
        "staticSuffix": ".Ops",
        "staticUsesOutputType": true
      },
      "exclude": [
        "@effect/io/Exit#collectAll",
        "@effect/io/Exit#collectAllPar",
        "@effect/io/Fiber#collectAll",
        "@effect/io/Metric/Polling#collectAll"
      ]
    }
  ],
  "additionalExtensions": [
    ["effect/io/Config#succeed", "static", "__call", "effect/io/Config.Ops"],

    ["effect/io/Effect#sync", "static", "__call", "effect/io/Effect.Ops"],
    [
      "effect/io/Effect#acquireRelease",
      "static",
      "acquireRelease",
      "effect/io/Effect.Ops"
    ],

    [
      "effect/io/Effect#makeSemaphore",
      "static",
      "make",
      "effect/io/Effect/Semaphore.Ops"
    ],
    ["effect/io/Effect#service", "getter", "access", "effect/data/Context/Tag"],
    [
      "effect/io/Effect#serviceWith",
      "fluent",
      "accessWith",
      "effect/data/Context/Tag"
    ],
    [
      "effect/io/Effect#serviceWithEffect",
      "fluent",
      "accessWithEffect",
      "effect/data/Context/Tag"
    ],
    [
      "effect/io/Effect#unsafeMakeSemaphore",
      "static",
      "unsafeMake",
      "effect/io/Effect/Semaphore.Ops"
    ],

    ["effect/io/Effect#orElse", "pipeable-operator", "|"],
    ["effect/io/Effect#zip", "pipeable-operator", "+"],
    ["effect/io/Effect#zipPar", "pipeable-operator", "&"],
    ["effect/io/Effect#zipLeft", "pipeable-operator", "<"],
    ["effect/io/Effect#zipRight", "pipeable-operator", ">"],

    ["effect/io/FiberRef#locally", "fluent", "locally"],
    [
      "effect/io/FiberRef#locally",
      "fluent",
      "fiberRefLocally",
      "effect/io/Effect"
    ],
    ["effect/io/FiberRef#locallyWith", "fluent", "locallyWith"],
    [
      "effect/io/FiberRef#locallyWith",
      "fluent",
      "fiberRefLocallyWith",
      "effect/io/Effect"
    ],

    ["effect/io/Layer#sync", "static", "__call", "effect/io/Layer.Ops"],

    ["effect/io/Layer#merge", "pipeable-operator", "+"],
    ["effect/io/Layer#orElse", "pipeable-operator", "|"],
    ["effect/io/Layer#provide", "pipeable-operator", ">>"],
    ["effect/io/Layer#provideMerge", "pipeable-operator", ">"],

    ["effect/io/Logger/Level/LogLevel#greaterThan", "pipeable-operator", ">"],
    [
      "effect/io/Logger/Level/LogLevel#greaterThanEqual",
      "pipeable-operator",
      ">="
    ],
    ["effect/io/Logger/Level/LogLevel#lessThan", "pipeable-operator", "<"],
    [
      "effect/io/Logger/Level/LogLevel#lessThanEqual",
      "pipeable-operator",
      "<="
    ],

    ["effect/io/Queue.Enqueue#offer", "pipeable-operator", "<<"],
    ["effect/io/Queue.Enqueue#offerAll", "pipeable-operator", "+"],

    ["effect/io/Schedule#andThen", "pipeable-operator", "/"],
    ["effect/io/Schedule#andThenEither", "pipeable-operator", "%"],
    ["effect/io/Schedule#bothInOut", "pipeable-operator", "**"],
    ["effect/io/Schedule#choose", "pipeable-operator", "+"],
    ["effect/io/Schedule#compose", "pipeable-operator", ">>"],
    ["effect/io/Schedule#intersect", "pipeable-operator", "&&"],
    ["effect/io/Schedule#union", "pipeable-operator", "||"],
    ["effect/io/Schedule#zipLeft", "pipeable-operator", "<"],
    ["effect/io/Schedule#zipRight", "pipeable-operator", ">"],

    ["effect/io/Schedule/Interval#lessThan", "pipeable-operator", "<"],

    ["effect/io/Schedule/Intervals#intersect", "pipeable-operator", "&&"],
    ["effect/io/Schedule/Intervals#lessThan", "pipeable-operator", "<"],
    ["effect/io/Schedule/Intervals#union", "pipeable-operator", "||"]
  ]
}
